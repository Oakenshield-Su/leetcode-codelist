/**
 * 题解：爬楼梯
 *       假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * 思路：向后处理法
 *       题设包含两种状态：1阶 and 2阶到达n阶
 *       状态1：从第n-1阶到n阶需要上1阶完成最终状态
 *       状态2：从第n-2阶到n阶需要上2阶完成最终状态
 *       状态方程：f(n) = f(n-1) + f(n-2) 
                   f(1) = 1 
                   f(2) = 2
**/

class Solution {
public:
    int climbStairs(int n) {
        if (n == 1)     //边界条件
        	return 1;
        int dp[n + 1];
        dp[1] = 1;       //状态方程初始条件
        dp[2] = 2; 
        for (int i = 3; i <= n; ++i)
        {
        	/* code */
        	dp[i] = dp[i-1] + dp[i-2];    //状态方程
        }
        return dp[n];
    }
};